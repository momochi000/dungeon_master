#+title: Project

* Tasks
** DONE create structure for game state
CLOSED: [2024-01-08 Mon 13:36]
seems like defrecord is the way to do this
*** DONE create the file with the defrecord statement
CLOSED: [2023-12-29 Fri 15:08]

#+begin_example
dungeon-master.core=> (require '[dungeon-master.game-state :as game-state])
nil

dungeon-master.core=> (ns-aliases *ns*)
{game-state #object[clojure.lang.Namespace 0x2ee63961 "dungeon-master.game-state"]}
dungeon-master.core=> (ns-publics 'dungeon-master.game-state)
{->GameState #'dungeon-master.game-state/->GameState, map->GameState #'dungeon-master.game-state/map->GameState}
dungeon-master.core=> (def gs (game-state/->GameState "foo" "bar"))
#'dungeon-master.core/gs
#+end_example

*** DONE create some way to push some data fixture into neo4j
CLOSED: [2024-01-08 Mon 12:37]
some strawman graph, based on the dnd convo i had with gpt and the entities
extracted.
+ [X] function(ality) to create a person node in neo4j
+ [X] take the json emitted by gpt and parse it into clojure
+ [X] loop over the entities, and create nodes for each
  if they don't exist
+ [X] loop over relationships, and connect entities
  if they aren't already connected
** DONE create method to call gpt with some prompt on top of the user action
CLOSED: [2024-01-08 Mon 19:48]
** DONE create prompt to extract entities etc from gpt response
CLOSED: [2024-01-09 Tue 11:05]
** DONE update the graph according to entities and relationships in json
CLOSED: [2024-01-10 Wed 16:52]
from gpt's response to extract entities

MERGE alone is not sufficient to prevent re-insertion of entities.
I need to match on id and if there is no record, then re-insert
if there is a record, i need to do something smart about the description

I also shouldn't use ~id~ as a unique field, id is already a property of all nodes
I'll want to come up with something else and add a unique constraint like
~CREATE CONSTRAINT ON (p:Person) ASSERT p.my_field IS UNIQUE~
** DONE continue fleshing out fixture, use game chat from gpt
CLOSED: [2024-01-10 Wed 16:52]
** DONE update repl with common includes
CLOSED: [2024-01-12 Fri 13:52]
i shouldn't have to include everything over and over to test things in the repl
http://www.futurile.net/2020/03/07/clojure-lein-dev-experience-and-repl-tools/
https://dev.solita.fi/2014/03/18/pimp-my-repl.html
** DONE create initial character sheet data structure
CLOSED: [2024-01-19 Fri 18:32]
and insert it into the game state somewhere
** DONE character sheet becomes part of the context
CLOSED: [2024-01-27 Sat 17:34]
at least some simple descriptive part of it
** DONE create/expose primary interface
CLOSED: [2024-02-08 Thu 22:21]
the game loop where I can type somethign in and execute ~run-turn~ every turn

I think this is kinda working now, but there were several bugs that had shown themselves:
+ it looped infinitely once not waiting to take user input
** DONE Update prompt so DM doesn't speak for player :bug:
CLOSED: [2024-02-09 Fri 16:33]
+ it spoke for me, "please, my good friend, call me Torynn," you continue ...
** DONE need to accept nodes of type item
CLOSED: [2024-02-23 Fri 10:49]
the npc described a moonstone pendant, it was not inserted into the knowledge
graph.
maybe i should just allow it to insert arbitrary types of nodes

I believe this is working but it's a bit sketchy. Don't like passing raw text into a database query. I need some controls on this.
** DONE Add quit game command
CLOSED: [2024-02-23 Fri 18:58]
** DONE ignore empty inputs
CLOSED: [2024-03-01 Fri 12:55]
if user just hits enter, don't execute a turn.
** TODO ability to save and load the game
this implies that i can somehow keep graphs separate. How do I like index a
"game world" such that queries in one cannot ever cross over into queries of
another? i suppose that'd be a form of partitioning.

I would also need to be able to persist the character sheet and other game state

after some research it apears that neo4j doesn't support partitioning in that way. Either you logically partition things by adding an arbitrary attribute to everything, or you simply create a separate database instance

What I could do is use something akin to =pg_dump= and =pg_restore=
Neo4j has neo4j-admin dump and load

Dump the database:
  ```shell
  $NEO4J_HOME/bin/neo4j-admin dump --database=your-database-name --to=/path/to/destination/dumpfilename.dump
  ```

**neo4j-admin load**: This command is used to restore a database from a dump file created by `neo4j-admin dump`. Prior to using this command, the database must be stopped, and the target database should not exist.

   Load the database from a dump:
   ```shell
   $NEO4J_HOME/bin/neo4j-admin load --from=/path/to/source/dumpfilename.dump --database=your-database-name --force
   ```


this implies I should also back up the character sheet and other game state data
into the database before dumping it.
** TODO figure out how to query the database on each turn
to provide and generate the context needed for the current turn when calling the
LLM
user input -> extract entities -> cypher query?
or user input -> vector search?
or both..?

the question is, what is the subject of the query? I think basically i need to consider who should know what. What should the player know? what should the relevan nearby npcs know? what does the DM need to know?
These answers will probably reveal themselves under more playtesting.
** TODO make updating world state asynchronous
user types their input, new turn is evaluated and the LLM responds with the
result of the user's action.

The LLM output is then examined by another LLM call so that entities and
relationships may be extracted. These entities and relationships are added to
the graph db.

I want to make the above process async, since it shouldn't block the user from
taking their next action.
** TODO accept and parse commands
if input is something like ~/exit~, they can quit
** TODO have some kind of prompt before user input
at least a ~>~ or something
** TODO add tests
what sorts of tests? I need to think and design them. This will also inform how
I should restructure my code.
** TODO problem: how to invalidate world state?
or how to handle contradictory information?
i have a graph which shows an npc both at amn and at baldurs gate

in this case i condsider it a bug. He /was/ at amn, but now is in baldurs gate,
but the procedure which updates the world state inserted both though he was only
talking about being at amn previously.

however, it is very conceivable that one could be at some location and then
later move to another location, at which point they should no longer have the
=AT= relationship to the other place.

Perhaps an entity should only be allowed a single =AT= relationship? but then
what if there were rumors about a thing. maybe it's rumored that some artifact
is here, there, or elsewhere, and it's actual location isn't known...?
** TODO crash at json parse :bug:
what a crappy error message, no insight into where in my code things went wrong

Execution error (JsonParseException) at com.fasterxml.jackson.core.JsonParser/_constructError (JsonParser.java:2477).
Unexpected character (']' (code 93)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
 at [Source: (StringReader); line: 4, column: 4]

Full report at:
/tmp/clojure-12333066275953008635.edn
make: *** [play] Error 1

I suspect openai returned an invalid json
** TODO Crashed once when node type wasn't recognized :bug:
came back as "group" rather than person or place
+ create node failed when gpt passed back "group" rather than place or person
I need to add that as a node type.
maybe i should be open to gpt suggesting more node types
** TODO infinite loop not waiting for user input? :bug:
+ it looped infinitely once not waiting to take user input
doesn't seem to be happening anymore
** TODO fix environment variable setting
i shouldn't have to pass in environment variables to set the database url, it
should be set as bolt://graphdb:<port> as given by the docker-compose config.
but for the nix repl environment i need it to be "bolt://localhost"

These should be things i can set in the project.clj and profiles.clj files but
they aren't working.
** TODO Sanitize node insertion into knowledge graph
currently i just take the node type returned by gpt and stick it into a query.
This has risk. Need to sanitize
** TODO Replace usage of TransactionWork
TransactionWork is deprecated in favor of TransactionCallback
https://neo4j.com/docs/api/java-driver/current/org.neo4j.driver/org/neo4j/driver/TransactionWork.html
** TODO move game_state.clj under game/
** TODO set up a beginning game state
** TODO playtest
** TODO turn the results from neo4j query into some nested map structure
this is step 1 in an experiment. i don't know if this is the best representation
of the graph to place in memory but the intent is to get closer to finding out.

alternatively i'd turn it into clojure's loom or ubergraph

perhaps the best way to represent the graph is simply a graphviz dot text format?

I believe GPT is smart enough to read that and understand the structure without
having to do anything fancy with turning a deeply nested map into a prompt
somehow

I don't actually have to do anything here. I can just take the output of neo4j
as a string or a table -> string and feed that directly into the prompt. GPT is
smart enough to know how to understand it.
** TODO Create some way to handle database setup
e.g. create constraints and indices
* Notes
** neo4j
*** databases
neo4j begins with 2 databases:
+ system
  the system database described above, containing meta-data on the DBMS and security configuration.

+ neo4j
  the default database, named using the config option dbms.default_database=neo4j.
*** workings
**** an updating query always either fully succeeds or does not succeed at all.
**** transactions
+--------------------------------------------------+-------------------------------------------------------------------+
| Explicit                                         | Implicit                                                           |
+--------------------------------------------------+-------------------------------------------------------------------+
| Opened by the user.                              | Opened automatically.                                              |
+--------------------------------------------------+--------------------------------------------------------------------+
| Can execute multiple Cypher queries in sequence. | Can execute a single Cypher query.                                 |
+--------------------------------------------------+-------------------------------------------------------------------+
| Committed, or rolled back, by the user.          | Committed automatically when a transactions finishes successfully. |
+--------------------------------------------------+-------------------------------------------------------------------+
*** documentation
**** bolt driver wiki
https://github.com/neo4j/neo4j-java-driver/wiki
